# Generated by Django 5.2.5 on 2025-08-20 21:53

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('composition', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AIModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('model_type', models.CharField(choices=[('transformer', 'Transformer'), ('rnn', 'RNN/LSTM'), ('vae', 'Variational Autoencoder'), ('gan', 'Generative Adversarial Network'), ('diffusion', 'Diffusion Model')], max_length=20)),
                ('version', models.CharField(max_length=20)),
                ('description', models.TextField()),
                ('max_duration', models.PositiveIntegerField(default=300, help_text='Maximum duration in seconds')),
                ('sample_rate', models.PositiveIntegerField(default=44100)),
                ('parameters', models.JSONField(default=dict, help_text='Model configuration parameters')),
                ('is_active', models.BooleanField(default=True)),
                ('is_premium', models.BooleanField(default=False)),
                ('training_completion', models.FloatField(default=100.0, help_text='Training completion percentage')),
                ('quality_score', models.FloatField(default=0.0, help_text='Subjective quality score (0-10)')),
                ('generation_speed', models.FloatField(default=1.0, help_text='Generation speed multiplier')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('supported_genres', models.ManyToManyField(blank=True, to='composition.genre')),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('name', 'version')},
            },
        ),
        migrations.CreateModel(
            name='MusicTheoryRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('rule_type', models.CharField(choices=[('harmony', 'Harmonic Rules'), ('melody', 'Melodic Rules'), ('rhythm', 'Rhythmic Rules'), ('form', 'Form and Structure'), ('voice_leading', 'Voice Leading')], max_length=20)),
                ('description', models.TextField()),
                ('parameters', models.JSONField(default=dict)),
                ('weight', models.FloatField(default=1.0, help_text='Rule importance weight')),
                ('key_signatures', models.JSONField(default=list, help_text='Applicable key signatures')),
                ('time_signatures', models.JSONField(default=list, help_text='Applicable time signatures')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('genres', models.ManyToManyField(blank=True, to='composition.genre')),
            ],
        ),
        migrations.CreateModel(
            name='GenerationRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=200)),
                ('duration', models.PositiveIntegerField(default=60)),
                ('tempo', models.PositiveIntegerField(default=120)),
                ('key_signature', models.CharField(default='C', max_length=10)),
                ('creativity_level', models.FloatField(default=0.7, help_text='Creativity vs adherence to training (0-1)')),
                ('mood', models.CharField(blank=True, max_length=50)),
                ('instruments', models.JSONField(default=list)),
                ('style_reference', models.CharField(blank=True, help_text='Style reference description', max_length=200)),
                ('custom_parameters', models.JSONField(default=dict)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('progress', models.FloatField(default=0.0, help_text='Generation progress (0-100)')),
                ('error_message', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('ai_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ml_engine.aimodel')),
                ('generated_composition', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='generation_request', to='composition.musiccomposition')),
                ('genre', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='composition.genre')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='generation_requests', to=settings.AUTH_USER_MODEL)),
                ('music_theory_rules', models.ManyToManyField(blank=True, to='ml_engine.musictheoryrule')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TrainingDataset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('total_tracks', models.PositiveIntegerField(default=0)),
                ('total_duration', models.PositiveIntegerField(default=0, help_text='Total duration in seconds')),
                ('audio_format', models.CharField(default='wav', max_length=20)),
                ('sample_rate', models.PositiveIntegerField(default=44100)),
                ('bit_depth', models.PositiveIntegerField(default=16)),
                ('preprocessing_config', models.JSONField(default=dict)),
                ('is_processed', models.BooleanField(default=False)),
                ('processing_progress', models.FloatField(default=0.0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('genres', models.ManyToManyField(to='composition.genre')),
            ],
        ),
        migrations.CreateModel(
            name='ModelTrainingJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('training_config', models.JSONField(default=dict)),
                ('epochs', models.PositiveIntegerField(default=100)),
                ('batch_size', models.PositiveIntegerField(default=32)),
                ('learning_rate', models.FloatField(default=0.001)),
                ('status', models.CharField(choices=[('queued', 'Queued'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('stopped', 'Stopped')], default='queued', max_length=20)),
                ('current_epoch', models.PositiveIntegerField(default=0)),
                ('loss_history', models.JSONField(default=list)),
                ('metrics', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('ai_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='training_jobs', to='ml_engine.aimodel')),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ml_engine.trainingdataset')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
    ]
